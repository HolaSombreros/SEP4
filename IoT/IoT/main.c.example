/*
* main.c
* Author : IHA
*
* Example main file including LoRaWAN setup
* Just for inspiration :)
*/

#include <stdio.h>
#include <avr/io.h>

#include <ATMEGA_FreeRTOS.h>
#include <task.h>
#include <semphr.h>

#include <stdio_driver.h>
#include <serial.h>

 // Needed for LoRaWAN
#include <lora_driver.h>
#include <status_leds.h>

// Drivers
#include <mh_z19.h>
#include <hih8120.h>

// define two Tasks
void task1( void *pvParameters );
void task2( void *pvParameters );

void myCo2CallBack(uint16_t ppm) {
	printf("CO2 callback: %d\n", ppm);
}

// define semaphore handle
SemaphoreHandle_t xTestSemaphore;

// Prototype for LoRaWAN handler
void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
		if ( ( xTestSemaphore ) != NULL )
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
		}
	}

	xTaskCreate(
	task2
	,  "Task1"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5000/portTICK_PERIOD_MS; // 500 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
	
	uint16_t ppm;
	mh_z19_injectCallBack(myCo2CallBack);
	
	for(;;) {
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
		
		mh_z19_returnCode_t rc = mh_z19_takeMeassuring();
		if (rc != MHZ19_OK) {
			puts("Something went wrong...\n");
		} else {
			mh_z19_returnCode_t returnCode = mh_z19_getCo2Ppm(&ppm);
			if (returnCode == MHZ19_OK) {
				printf("CO2: %d\n", ppm);
			} else {
				printf("Return code: %d\n", returnCode);
			}
		}

		//PORTA ^= _BV(PA0);
	}
	
	
	while (1) {
		
	}
}

void task2( void *pvParameters )
{
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5000/portTICK_PERIOD_MS; // 500 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
	
	float temperature = 0.0;
	
	for(;;) {
		hih8120_wakeup();
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
		hih8120_measure();
		vTaskDelay(100);
		temperature = hih8120_getTemperature();
		
		printf("Temperature: %d\n", (uint16_t) temperature);
		//PORTA ^= _BV(PA0);
	}
}

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
	// Let's create some tasks
	puts("Creating tasks & semaphores...");
	create_tasks_and_semaphores();

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
	//// Initialise the LoRaWAN driver without down-link buffer
	//lora_driver_initialise(1, NULL);
	//// Create LoRaWAN task and start it up with priority 3
	//lora_handler_initialise(3);
}

/*-----------------------------------------------------------*/
int main(void)
{
	puts("Starting...");
	initialiseSystem(); // Must be done as the very first thing!!
	puts("Initializing CO2 sensor...");
	hih8120_initialise();
	mh_z19_initialise(ser_USART3);
	puts("Starting tasks...");
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
	
	/* Replace with your application code */
	while (1)
	{
	}
}

