Index: app/src/main/java/com/example/farmerama/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.farmerama;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.app.NotificationCompat;\r\nimport androidx.core.app.NotificationManagerCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.NavController;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.navigation.ui.AppBarConfiguration;\r\nimport androidx.navigation.ui.NavigationUI;\r\nimport androidx.work.PeriodicWorkRequest;\r\nimport androidx.work.WorkManager;\r\nimport androidx.work.Worker;\r\nimport androidx.work.WorkerParameters;\r\n\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.content.Context;\r\nimport android.os.Bundle;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.farmerama.data.model.LogObj;\r\nimport com.example.farmerama.data.util.NotificationWorker;\r\nimport com.example.farmerama.data.util.ToastMessage;\r\nimport com.example.farmerama.viewmodel.MainActivityViewModel;\r\nimport com.google.android.material.navigation.NavigationView;\r\n\r\nimport java.util.concurrent.TimeUnit;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n    private NavController navController;\r\n    private AppBarConfiguration appBarConfiguration;\r\n    private Toolbar toolbar;\r\n    private DrawerLayout drawerLayout;\r\n    private NavigationView navigationDrawer;\r\n    private MainActivityViewModel viewModel;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        initViews();\r\n        setUpViews();\r\n        setupNavigation();\r\n        setUpLoggedInUser();\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        getMenuInflater().inflate(R.menu.toolbar_menu, menu);\r\n        return true;\r\n    }\r\n\r\n\r\n    private void initViews() {\r\n        drawerLayout = findViewById(R.id.drawer_layout);\r\n        navigationDrawer = findViewById(R.id.nav_view);\r\n        toolbar = findViewById(R.id.toolbar);\r\n        viewModel = new ViewModelProvider(this).get(MainActivityViewModel.class);\r\n    }\r\n\r\n    private void setUpViews() {\r\n        NotificationChannel channel = new NotificationChannel(\"22\", \"thresholdNotification\", NotificationManager.IMPORTANCE_DEFAULT);\r\n        channel.setDescription(\"Channel for the notification regarding exceeding thresholds\");\r\n        NotificationManager notificationManager = getSystemService(NotificationManager.class);\r\n        notificationManager.createNotificationChannel(channel);\r\n\r\n        PeriodicWorkRequest request = new PeriodicWorkRequest.Builder(NotificationWorker.class, 5, TimeUnit.MINUTES).build();\r\n        WorkManager.getInstance(this).enqueue(request);\r\n\r\n        ToastMessage.getToastMessage().observe(this, toast -> {\r\n            if (!toast.isEmpty())\r\n                Toast.makeText(this, toast, Toast.LENGTH_SHORT).show();\r\n        });\r\n\r\n        viewModel.getTodayLogs().observe(this, logs -> {\r\n            for (LogObj log : logs) {\r\n                publishNotification(log);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void setupNavigation() {\r\n        navController = Navigation.findNavController(this, R.id.fragment);\r\n        setSupportActionBar(toolbar);\r\n        appBarConfiguration = new AppBarConfiguration.Builder(\r\n                R.id.latestDataFragment,\r\n                R.id.loginFragment,\r\n                R.id.signOut,\r\n                R.id.historicalDataFragment,\r\n                R.id.areasFragment,\r\n                R.id.employeesFragment,\r\n                R.id.logsFragment,\r\n                R.id.thresholdModificationFragment,\r\n                R.id.registerFragment)\r\n                .setOpenableLayout(drawerLayout)\r\n                .build();\r\n\r\n        NavigationUI.setupActionBarWithNavController(this, navController, appBarConfiguration);\r\n        NavigationUI.setupWithNavController(navigationDrawer, navController);\r\n\r\n        navigationDrawer.setNavigationItemSelectedListener(item -> {\r\n            navController.navigate(item.getItemId());\r\n            drawerLayout.closeDrawers();\r\n            return true;\r\n        });\r\n\r\n        for (int i = 0; i < navigationDrawer.getMenu().size(); i++) {\r\n            navigationDrawer.getMenu().getItem(i).setVisible(false);\r\n        }\r\n        navigationDrawer.getMenu().findItem(R.id.loginFragment).setVisible(true);\r\n        navigationDrawer.getMenu().findItem(R.id.latestDataFragment).setVisible(true);\r\n\r\n        navController.addOnDestinationChangedListener((controller, destination, arguments) -> {\r\n            int id = destination.getId();\r\n\r\n            if (id == R.id.loginFragment) {\r\n                toolbar.setVisibility(View.GONE);\r\n                drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);\r\n            } else {\r\n                toolbar.setVisibility(View.VISIBLE);\r\n                drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void setUpLoggedInUser() {\r\n        viewModel.getLoggedInUser().observe(this, loggedInUser -> {\r\n            if (loggedInUser != null) {\r\n                Toast.makeText(this, \"Logged in user\", Toast.LENGTH_SHORT).show();\r\n                viewModel.saveLoggedInUser(loggedInUser);\r\n\r\n                toolbar.setVisibility(View.VISIBLE);\r\n                for (int i = 0; i < navigationDrawer.getMenu().size(); i++) {\r\n                    navigationDrawer.getMenu().getItem(i).setVisible(true);\r\n                }\r\n\r\n                if (loggedInUser.getRole().equals(\"EMPLOYEE\")) {\r\n                    navigationDrawer.getMenu().findItem(R.id.registerFragment).setVisible(false);\r\n                    navigationDrawer.getMenu().findItem(R.id.thresholdModificationFragment).setVisible(false);\r\n                }\r\n                navigationDrawer.getMenu().findItem(R.id.loginFragment).setVisible(false);\r\n                navController.navigate(R.id.latestDataFragment);\r\n            } else {\r\n                for (int i = 0; i < navigationDrawer.getMenu().size(); i++) {\r\n                    navigationDrawer.getMenu().getItem(i).setVisible(false);\r\n                }\r\n                navigationDrawer.getMenu().findItem(R.id.loginFragment).setVisible(true);\r\n                navigationDrawer.getMenu().findItem(R.id.latestDataFragment).setVisible(true);\r\n\r\n                viewModel.removeLoggedInUser();\r\n                navController.navigate(R.id.loginFragment);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void publishNotification(LogObj log) {\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(this, \"22\")\r\n                .setSmallIcon(R.mipmap.application_launcher)\r\n                .setContentTitle(\"Measurement out of the thresholds\")\r\n                .setContentText(String.format(\"Exceeded %s in area %s\", log.getMeasurementType(), log.getAreaName()))\r\n                .setPriority(NotificationCompat.PRIORITY_DEFAULT)\r\n                .setChannelId(\"22\");\r\n\r\n        NotificationManagerCompat notificationManager = NotificationManagerCompat.from(this);\r\n        notificationManager.notify(22, builder.build());\r\n    }\r\n\r\n    @Override\r\n    public boolean onSupportNavigateUp() {\r\n        return NavigationUI.navigateUp(navController, appBarConfiguration) || super.onSupportNavigateUp();\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n        if (item.getItemId() == R.id.signOut) {\r\n            viewModel.logOut();\r\n            return true;\r\n        }\r\n        return NavigationUI.onNavDestinationSelected(item, navController) || super.onOptionsItemSelected(item);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/farmerama/MainActivity.java b/app/src/main/java/com/example/farmerama/MainActivity.java
--- a/app/src/main/java/com/example/farmerama/MainActivity.java	(revision af904a7e8ade857e2168cfc04bde1a8106429a27)
+++ b/app/src/main/java/com/example/farmerama/MainActivity.java	(date 1653410032970)
@@ -92,11 +92,11 @@
         appBarConfiguration = new AppBarConfiguration.Builder(
                 R.id.latestDataFragment,
                 R.id.loginFragment,
-                R.id.signOut,
                 R.id.historicalDataFragment,
                 R.id.areasFragment,
                 R.id.employeesFragment,
                 R.id.logsFragment,
+                R.id.thresholdDataFragment,
                 R.id.thresholdModificationFragment,
                 R.id.registerFragment)
                 .setOpenableLayout(drawerLayout)
